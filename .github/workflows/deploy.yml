name: Validate Deployment
on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 9,21 * * *'  # Runs at 9:00 AM and 9:00 PM GMT

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Run Quota Check
        id: quota-check
        run: |
          export AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
          export AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
          export AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
          export AZURE_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          export GPT_MIN_CAPACITY="30"
          export TEXT_EMBEDDING_MIN_CAPACITY="30"
          export AZURE_REGIONS="${{ vars.AZURE_REGIONS }}"

          chmod +x scripts/checkquota.sh
          if ! scripts/checkquota.sh; then
            if grep -q "No region with sufficient quota found" scripts/checkquota.sh; then
              echo "QUOTA_FAILED=true" >> $GITHUB_ENV
            fi
            exit 1
          fi

      - name: Send Notification on Quota Failure
        if: env.QUOTA_FAILED == 'true'
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          EMAIL_BODY=$(cat <<EOF
          {
            "body": "<p>Dear Team,</p><p>The quota check has failed, and the pipeline cannot proceed.</p><p><strong>Build URL:</strong> ${RUN_URL}</p><p>Please take necessary action.</p><p>Best regards,<br>Your Automation Team</p>"
          }
          EOF
          )
          curl -X POST "${{ secrets.LOGIC_APP_URL }}" -H "Content-Type: application/json" -d "$EMAIL_BODY" || echo "Failed to send notification"

      - name: Fail Pipeline if Quota Check Fails
        if: env.QUOTA_FAILED == 'true'
        run: exit 1

      - name: Install Bicep CLI
        run: az bicep install

      - name: Set Deployment Region
        run: |
          echo "Selected Region: $VALID_REGION"
          echo "AZURE_LOCATION=$VALID_REGION" >> $GITHUB_ENV

      - name: Generate Resource Group Name
        id: generate_rg_name
        run: |
          echo "Generating a unique resource group name..."
          ACCL_NAME="docgen"
          SHORT_UUID=$(uuidgen | cut -d'-' -f1)
          UNIQUE_RG_NAME="arg-${ACCL_NAME}-${SHORT_UUID}"
          echo "RESOURCE_GROUP_NAME=${UNIQUE_RG_NAME}" >> $GITHUB_ENV
          echo "Generated RESOURCE_GROUP_NAME: ${UNIQUE_RG_NAME}"

      - name: Check and Create Resource Group
        id: check_create_rg
        run: |
          set -e
          echo "Checking if resource group exists..."
          rg_exists=$(az group exists --name ${{ env.RESOURCE_GROUP_NAME }})
          if [ "$rg_exists" = "false" ]; then
            az group create --name ${{ env.RESOURCE_GROUP_NAME }} --location ${{ env.AZURE_LOCATION }}
          fi

      - name: Generate Unique Solution Prefix
        id: generate_solution_prefix
        run: |
          set -e
          COMMON_PART="pslr"
          TIMESTAMP=$(date +%s)
          UPDATED_TIMESTAMP=$(echo $TIMESTAMP | tail -c 3)
          UNIQUE_SOLUTION_PREFIX="${COMMON_PART}${UPDATED_TIMESTAMP}"
          echo "SOLUTION_PREFIX=${UNIQUE_SOLUTION_PREFIX}" >> $GITHUB_ENV

      - name: Deploy Bicep Template
        id: deploy
        run: |
          set -e
          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --template-file infra/main.json \
            --parameters \
              environmentName="${{ env.SOLUTION_PREFIX }}" \
              secondaryLocation="eastus2" \
              deploymentType="GlobalStandard" \
              gptModelName="gpt-4o" \
              azureOpenaiAPIVersion="2024-05-01-preview" \
              gptDeploymentCapacity="10" \
              embeddingModel="text-embedding-ada-002" \
              embeddingDeploymentCapacity="30" \
              imageTag="latest"

      - name: Extract AI Services and Key Vault Names
        if: always()
        run: |
          echo "Fetching AI Services and Key Vault names..."
          KEYVAULT_NAME=$(az resource list --resource-group "${{ env.RESOURCE_GROUP_NAME }}" --resource-type "Microsoft.KeyVault/vaults" --query "[].name" -o tsv)
          echo "KEYVAULT_NAME=$KEYVAULT_NAME" >> $GITHUB_ENV
          AI_SERVICES=$(az resource list --resource-group "${{ env.RESOURCE_GROUP_NAME }}" --resource-type "Microsoft.CognitiveServices/accounts" --query "[].name" -o tsv)
          AI_SERVICES=$(echo "$AI_SERVICES" | paste -sd ' ' -)
          echo "AI_SERVICES=$AI_SERVICES" >> $GITHUB_ENV

      - name: Delete Bicep Deployment
        if: success()
        run: |
          set -e
          rg_exists=$(az group exists --name ${{ env.RESOURCE_GROUP_NAME }})
          if [ "$rg_exists" = "true" ]; then
            az group delete --name ${{ env.RESOURCE_GROUP_NAME }} --yes --no-wait
          fi

      - name: Wait for Resource Deletion to Complete
        run: |
          echo "Waiting for resource deletion..."
          IFS=' ' read -r -a resources_to_check <<< "${{ env.AI_SERVICES }}"
          resource_list=$(az resource list --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" --output yaml)
          max_retries=3
          retry_intervals=(30 60 120)
          retries=0
          while true; do
            resource_found=false
            for resource in "${resources_to_check[@]}"; do
              if echo "$resource_list" | grep -q "name: $resource"; then
                resource_found=true
              fi
            done
            if [ "$resource_found" = true ]; then
              retries=$((retries+1))
              if [ "$retries" -ge "$max_retries" ]; then
                break
              else
                sleep "${retry_intervals[$((retries-1))]}"
                resource_list=$(az resource list --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" --output yaml)
              fi
            else
              break
            fi
          done

      - name: Wait for Soft Deletion of Key Vault and AI Services
        if: always()
        run: |
          if [ -n "${{ env.KEYVAULT_NAME }}" ]; then
            while true; do
              DELETED_VAULT=$(az keyvault show-deleted --name ${{ env.KEYVAULT_NAME }} --query "id" -o tsv 2>/dev/null || echo "")
              if [ -n "$DELETED_VAULT" ]; then
                break
              fi
              sleep 15
            done
          fi
          for AI_SERVICE in ${{ env.AI_SERVICES }}; do
            while true; do
              DELETED_AI_SERVICE=$(az cognitiveservices account list-deleted --query "[?name=='$AI_SERVICE'].id" -o tsv 2>/dev/null || echo "")
              if [ -n "$DELETED_AI_SERVICE" ]; then
                break
              fi
              sleep 15
            done
          done

      # ðŸ”µ Here is your updated Purge Step:
      - name: Purge Key Vault and AI Services
        if: always()
        run: |
          echo "Purging soft deleted resources..."

          # Purge AI Services
          IFS=' ' read -r -a SERVICES <<< "${{ env.AI_SERVICES }}"
          for AI_SERVICE in "${SERVICES[@]}"; do
            echo "Checking location for AI Service: $AI_SERVICE"
            SERVICE_LOCATION=$(az cognitiveservices account list-deleted --query "[?name=='$AI_SERVICE'].location" -o tsv 2>/dev/null || echo "")
            if [ -n "$SERVICE_LOCATION" ]; then
              echo "Purging AI Service $AI_SERVICE in $SERVICE_LOCATION"
              az cognitiveservices account purge --location "$SERVICE_LOCATION" --resource-group "${{ env.RESOURCE_GROUP_NAME }}" --name "$AI_SERVICE" || echo "Skipping purge failure for AI Service $AI_SERVICE"
            else
              echo "Could not determine location for AI Service: $AI_SERVICE. Skipping purge."
            fi
          done

          # Purge Key Vaults
          echo "Starting purge for Key Vaults..."
          IFS=' ' read -r -a VAULTS <<< "${{ env.KEYVAULT_NAME }}"
          for VAULT in "${VAULTS[@]}"; do
            echo "Checking location for Key Vault: $VAULT"
            VAULT_LOCATION=$(az keyvault list-deleted --query "[?name=='$VAULT'].properties.location" -o tsv 2>/dev/null || echo "")
            if [ -n "$VAULT_LOCATION" ]; then
              echo "Purging Key Vault $VAULT in $VAULT_LOCATION"
              az keyvault purge --name "$VAULT" --location "$VAULT_LOCATION" || echo "Skipping purge failure for Key Vault $VAULT (likely due to purge protection or soft-delete holding)"
            else
              echo "Could not determine location for Key Vault: $VAULT. Skipping purge."
            fi
          done

      - name: Send Notification on Failure
        if: failure()
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          EMAIL_BODY=$(cat <<EOF
          {
            "body": "<p>Dear Team,</p><p>We would like to inform you that the Research Assistant Automation process has encountered an issue and has failed to complete successfully.</p><p><strong>Build URL:</strong> ${RUN_URL}</p><p>Please investigate the matter.</p><p>Best regards,<br>Your Automation Team</p>"
          }
          EOF
          )
          curl -X POST "${{ secrets.LOGIC_APP_URL }}" -H "Content-Type: application/json" -d "$EMAIL_BODY" || echo "Failed to send notification"
